{
    "contents" : "########################################################################################################################\n## Package    : MeinteR\n## File       : dmsEncode.R\n## Functions  : findEncodeBroadPeakOverlaps (exported)\n##            : findTeloCentromereOverlaps (exported)\n##            : findCOSMICOverlaps (exported)\n##            : findHistoneModOverlaps (exported)\n##\n## Updated    : 04-11-2015\n##\n## Title      : Match ENCODE regulatory elements that overlap differentially methylated sites. \n########################################################################################################################\n\n\n\n#' Detect differentially methylated sites that overlap with ENCODE/wgEncodeTfbs broad peaks files\n#'\n#' Detection of differentially methylated sites overlapping conserved transcription factor binding sites in the human/mouse/rat alignment.\n#'\n#' @param bed.file.name   A bed file (full path) with the following fields: chrom, chromStart, chromEnd, strand, score\n#' @param known.conserved.tfbs.file (optional) Full local path to the UCSC TFBS Conserved table. If the table is not available locally then the script will fetch it from UCSC (NOTE!: Download gz compressed file. Original file >290MB) \n#' @return Frequency table of conserved transcription factors in the input bed file\n#' @return Overlapping segments A detailed dataframe with the differentially methylated sites that overlap with conserved TFBS (hg19)\n#' @return Frequency table of conserved transcription factors on whole human genome\n#' @author Andigoni Malousi\n#' @export \nfindEncodeBroadPeakOverlaps <- function(bed.file.name, encode.broad.peaks=NULL, sample.name=NULL)\n{\n  if (is.null(encode.broad.peaks)) {stop(\"ENCODE broad peak file empty. Check available tables at http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeUwTfbs\")} \n  else {\n    library(RCurl) \n    temp <- tempfile()\n    download.file(url='http://hgdownload.cse.ucsc.edu/goldenPath/hg19/encodeDCC/wgEncodeUwTfbs/wgEncodeUwTfbsA549CtcfStdHotspotsRep1.broadPeak.gz', destfile=temp, quiet= TRUE, method='curl')\n    broad.peak.data <- read.csv(gzfile(temp), stringsAsFactors = FALSE, header=FALSE, sep=\"\\t\")\n    unlink(temp)\n  }\n}\n\n\n#' Find differentially methylated sites overlapping telomeres/centromers\n#'\n#' Detection of differentially methylated sites overlapping telomere/centromere regions.\n#'\n#' @param bed.file.name   A bed file (full path) with the following fields: chrom, chromStart, chromEnd, strand, score\n#' @param gap.file (optional) Full local path to the UCSC TFBS Conserved table. If the table is not available locally then the script will fetch it from UCSC (NOTE!: Download gz compressed file. Original file >290MB) \n#' @return Frequency table of each transcription factor\n#' @return Overlapping segments A detailed dataframe with the differentially methylated sites that overlap with conserved TFBS (hg19)\n#' @author Andigoni Malousi\n#' @export\nfindTeloCentromereOverlaps <- function(bed.file.name,gap.file=NULL){\n  if (is.na(bed.file.name)) {stop(\"The bed file with the differentially methylated sites is not set.\")} \n  library(plyr)\n  library(ggplot2)\n  library(GenomicRanges)\n  library(BSgenome.Hsapiens.UCSC.hg19)\n  mySession<-browserSession(\"UCSC\")\n  genome(mySession)<-\"hg19\"\n  if (is.null(gap.file)) {\n    message(\"Fetching UCSC gap table...\")\n    gap <-getTable(ucscTableQuery(mySession, table=\"gap\"))\n  } else {\n    len <- length(unlist(strsplit(gap.file, \"\\\\.\")[[1]])) #Get the extension of the filename\n    if (strsplit(gap.file, \"\\\\.\")[[1]][len] == \"gz\") { # Check if file is gzipped\n      gap <-read.csv(gzfile(gap.file), header=TRUE, sep=\"\\t\") #If yes unzip it\n    } else {\n      gap <- read.csv(gap.file,header=TRUE, sep=\"\\t\")\n    }\n  }\n  bed.data <- read.csv(bed.file.name, sep=\",\")\n  \n  telomeres <- gap[gap$type==\"telomere\",]\n  centromeres <-gap[gap$type==\"centromere\",]\n  colnames(bed.data)<-c(\"chr\", \"start\",\"end\", \"strand\", \"score\")\n  f.telomeres <- telomeres[,c(2:4)] #Select columns chrom, chromStart,chromEnd\n  f.centromeres <- centromeres[,c(2:4)] #Select columns chrom, chromStart,chromEnd\n  \n  \n  bed = with(bed.data, GRanges(chr, IRanges(start=start, end=end), strand=strand, score=score))\n  centro = with(f.centromeres, GRanges(chrom, IRanges(start=chromStart, end=chromEnd)))\n  hits = findOverlaps(bed, centro, ignore.strand=TRUE, select=\"all\")\n  centro.merged <- cbind(as.data.frame(bed[queryHits(hits)]), as.data.frame(centro[subjectHits(hits)]))\n  \n  telo = with(f.telomeres, GRanges(chrom, IRanges(start=chromStart, end=chromEnd)))\n  hits = findOverlaps(bed, telo, ignore.strand=TRUE, select=\"all\")\n  telo.merged <- cbind(as.data.frame(bed[queryHits(hits)]), as.data.frame(telo[subjectHits(hits)]))\n  result <- list()\n  result[[1]] <- centro.merged\n  result[[2]] <- telo.merged\n  return(result)\n}\n\n\n#' Find differentially methylated sites overlapping COSMIC mutations\n#'\n#' Detection of differentially methylated sites overlapping COSMIC somatic mutations found in human cancers.\n#'\n#' @param bed.file.name   A bed file (full path) with the following fields: chrom, chromStart, chromEnd, strand, score\n#' @param cosmic.raw.file (optional) Full local path to the UCSC COSMIC raw table. If the table is not available locally then the script will fetch it from UCSC (Might take few minutes to download)\n#' @param offset (default 50) The length of the genomic regions on each side adjacent to the differentially methylated sites that will be encountered for potential overlaps.\n#' @return Overlapping segments A detailed dataframe with the differentially methylated sites that overlap with the COSMIC mutation offset.\n#' @author Andigoni Malousi\n#' @export\nfindCOSMICOverlaps <- function(bed.file.name, cosmic.raw.file=NULL, offset=50){\n  if (is.na(bed.file.name)) {stop(\"The bed file with the differentially methylated sites is not set.\")} \n  library(plyr)\n  library(ggplot2)\n  library(GenomicRanges)\n  library(BSgenome.Hsapiens.UCSC.hg19)\n  mySession<-browserSession(\"UCSC\")\n  genome(mySession)<-\"hg19\"\n  if (is.null(cosmic.raw.file)) {\n    message(\"Fetching UCSC COSMIC raw table...\")\n    cosmicRaw <-getTable(ucscTableQuery(mySession, table=\"cosmicRaw\"))\n  } else {\n    len <- length(unlist(strsplit(cosmic.raw.file, \"\\\\.\")[[1]])) #Get the extension of the filename\n    if (strsplit(cosmic.raw.file, \"\\\\.\")[[1]][len] == \"gz\") { # Check if file is gzipped\n      cosmic.raw <-read.csv(gzfile(cosmic.raw.file), header=TRUE, sep=\"\\t\") #If yes unzip it\n    } else {\n      cosmic.raw <- read.csv(cosmic.raw.file,header=TRUE, sep=\"\\t\")\n    }\n  }\n  bed.data <- read.csv(bed.file.name, sep=\",\")\n  colnames(bed.data)<-c(\"chr\", \"start\",\"end\", \"strand\", \"score\")\n  #Add offset to cosmic mutations\n  cosmic.raw.offset <- cosmic.raw\n  cosmic.raw.offset$grch37_start <- as.numeric(cosmic.raw.offset$grch37_start) - offset\n  cosmic.raw.offset$grch37_stop <- as.numeric(cosmic.raw.offset$grch37_stop) + offset\n  cosmic.raw.offset$chromosome <- paste0(\"chr\",cosmic.raw.offset$chromosome)\n  \n  bed = with(bed.data, GRanges(chr, IRanges(start=start, end=end),strand=strand,score=score))\n  alt = with(cosmic.raw.offset, GRanges(chromosome, IRanges(start=grch37_start, end=grch37_stop), name=gene_name, mut_description=mut_description, accession_number=accession_number, mut_syntax_cds=mut_syntax_cds, tumour_site=tumour_site, mutated_samples=mutated_samples,\n                                        examined_samples=examined_samples, mut_freq=mut_freq))\n  hits = findOverlaps(bed, alt, ignore.strand=TRUE, select=\"all\")\n  merged <- cbind(as.data.frame(bed[queryHits(hits)]), as.data.frame(alt[subjectHits(hits)]))\n  #  freq <- count(merged, 'name')\n  #  freq_site <- count(merged,'tumour_site')\n  return(merged)\n}\n\n\n#library(BSgenome.Hsapiens.UCSC.hg19)\n#mySession<-browserSession(\"UCSC\")\n#genome(mySession)<-\"hg19\"\n#cosmicRaw <-getTable(ucscTableQuery(mySession, table=\"hub_22_bpHistoneModsS0018AH1H3K4me1MACS2_broad_peakEMBL-EBI\")) \n\n# url of taxon data\n#taxon_url = \"http://ftp.ebi.ac.uk/pub/databases/blueprint/data/homo_sapiens/Cord_blood/S0018A/CD4-positive_alpha-beta_T_cell/ChIP-Seq/NCMLS/S0018AH1.H3K4me1.ppqt_macs2_broad_v2.20130819.bb\"\n# import data in R\n#taxon = read.table(taxon_url, header = TRUE, row.names = 1)\n\n\n\n#' Find alternative splicing events overlapping human/mouse/rat conserved TFBS\n#'\n#' Detection of differentially methylated sites overlapping conserved transcription factor binding sites in the human/mouse/rat alignment.\n#'\n#' @param bed.file.name   A bed file (full path) with the following fields: chrom, chromStart, chromEnd, strand, score\n#' @param known.conserved.tfbs.file (optional) Full local path to the UCSC TFBS Conserved table. If the table is not available locally then the script will fetch it from UCSC (NOTE!: Download gz compressed file. Original file >290MB) \n#' @return Frequency table of each transcription factor\n#' @return Overlapping segments A detailed dataframe with the differentially methylated sites that overlap with conserved TFBS (hg19)\n#' @author Andigoni Malousi\n#' @export \nfindHistoneModOverlaps <- function(bed.file.name, broad.histone.file=NULL){\n  if (is.na(bed.file.name)) {stop(\"The bed file with the differentially methylated sites is not set.\")} \n  library(GenomicRanges)\n  library(BSgenome.Hsapiens.UCSC.hg19)\n  mySession<-browserSession(\"UCSC\")\n  genome(mySession)<-\"hg19\"\n  if (is.null(broad.histone.file)) {\n    broad.histone<-getTable(ucscTableQuery(mySession, track=\"Broad Histone\", table=\"wgEncodeBroadHistoneGm12878CtcfStdPk\"))\n  } else {\n    len <- length(unlist(strsplit(Broad.Histone.file, \"\\\\.\")[[1]])) #Get the extension of the filename\n    if (strsplit(broad.histone.file, \"\\\\.\")[[1]][len] == \"gz\") { # Check if file is gzipped\n      broad.histone <-read.csv(gzfile(broad.histone.file), header=TRUE, sep=\"\\t\") #If yes unzip it\n    } else {\n      broad.histone <- read.csv(broad.histone.file,header=TRUE, sep=\"\\t\")\n    }\n  }\n  \n  bed.data <- read.csv(bed.file.name, sep=\",\")\n  colnames(bed.data)<-c(\"chr\", \"start\",\"end\", \"strand\", \"score\")\n  known.conserved.tfbs <- known.conserved.tfbs[,c(2:4,7,5,8)] #Select columns chrom, chromStart,chromEnd,strand, type\n  colnames(known.conserved.tfbs)<-c(\"chr\",\"chromStart\",\"chromEnd\", \"strand\", \"name\", \"zScore\")\n  \n  \n  bed = with(bed.data, GRanges(chr, IRanges(start=start, end=end), strand=strand, score=score))\n  alt = with(known.conserved.tfbs, GRanges(chr, IRanges(start=chromStart, end=chromEnd), strand=strand, name=name))\n  hits = findOverlaps(bed, alt, ignore.strand=FALSE, select=\"all\")\n  merged <- cbind(as.data.frame(bed[queryHits(hits)]), as.data.frame(alt[subjectHits(hits)]))\n  freq <- count(merged, 'name')\n  known.conserved.tfbs.factors <-getTable(ucscTableQuery(mySession, table=\"tfbsConsFactors\"))\n  known.hg19.conserved.factors <- known.conserved.tfbs.factors[known.conserved.tfbs.factors$species==\"human\",]\n  merged.with.factors <- merge(merged, known.hg19.conserved.factors, by = \"name\")\n  freq.factors <- count(merged.with.factors,'factor')\n  refFreq <- count(known.conserved.tfbs, 'name')\n  result <- list()\n  result[[1]] <- freq.factors\n  result[[2]] <- merged.with.factors\n  return(result)\n}\n",
    "created" : 1446568363633.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "27|1|36|0|\n",
    "hash" : "1583606425",
    "id" : "7A5B727E",
    "lastKnownWriteTime" : 1467047739,
    "path" : "~/Desktop/INAB/MeinteR/R/dmsEncode.R",
    "project_path" : "R/dmsEncode.R",
    "properties" : {
        "notebook_format" : "html_document"
    },
    "relative_order" : 0,
    "source_on_save" : false,
    "type" : "r_source"
}