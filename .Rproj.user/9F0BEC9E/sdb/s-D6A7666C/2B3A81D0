{
    "contents" : "########################################################################################################################\n## Package    : MeinteR\n## File       : dmsTFBS.R\n## Functions  : findConservedTFBSOverlaps (exported)\n##            : findTFBS (exported)\n##\n## Updated    : 04-11-2015\n##\n## Title      : Find transcription factor binding sites (TFBS) that overlap differentially methylated sites. \n########################################################################################################################\n\n\n#' Find differentially methylated sites overlapping human/mouse/rat conserved TFBS\n#'\n#' Detection of differentially methylated sites overlapping conserved transcription factor binding sites in the human/mouse/rat alignment.\n#'\n#' @param bed.file.name   A bed file (full path) with the following fields: chrom, chromStart, chromEnd, strand, score\n#' @param known.conserved.tfbs.file (optional) Full local path to the UCSC TFBS Conserved table. If the table is not available locally then the script will fetch it from UCSC (NOTE!: Download gz compressed file. Original file >290MB) \n#' @return Group1 overlapping segments A detailed dataframe with the differentially methylated sites that overlap with conserved TFBS (hg19)\n#' @return Group2 overlapping segments A detailed dataframe with the differentially methylated sites that overlap with conserved TFBS (hg19)\n#' @return Frequency table of conserved transcription factors on whole human genome\n#' @author Andigoni Malousi\n#' @export \nfindConservedTFBSOverlaps <- function(bed.file.name, known.conserved.tfbs.file=NULL,group.thr = 0.3){\n  if (is.na(bed.file.name)) {stop(\"The bed file with the differentially methylated sites is not set.\")} \n \n  if (is.null(known.conserved.tfbs.file)) {\n    mySession <- browserSession(\"UCSC\",url=\"http://genome-euro.ucsc.edu/cgi-bin/\")\n    genome(mySession)<-\"hg19\"\n    message(\"Fetching tfbsConsSites table from UCSC...\")\n    known.conserved.tfbs <-getTable(ucscTableQuery(mySession, table=\"tfbsConsSites\"))\n    message(\"Fetching conserved transcription factors table (tfbsConsFactors)...\")\n    known.conserved.tfbs.factors <-getTable(ucscTableQuery(mySession, table=\"tfbsConsFactors\"))\n    if (is.empty(known.conserved.tfbs.factors)) {stop(\"Unable to fetch table from UCSC\")} else {message(\"DONE\")}\n  } else {\n    message(\"Loading local copy of UCSC/tfbsConsSites table\")\n    len <- length(unlist(strsplit(known.conserved.tfbs.file, \"\\\\.\")[[1]])) #Get the extension of the filename\n    if (strsplit(known.conserved.tfbs.file, \"\\\\.\")[[1]][len] == \"gz\") { # Check if file is gzipped\n      known.conserved.tfbs <-read.csv(gzfile(known.conserved.tfbs.file), header=TRUE, sep=\"\\t\") #If yes unzip it\n    } else {\n      known.conserved.tfbs <- read.csv(known.conserved.tfbs.file,header=TRUE, sep=\"\\t\")\n    }\n    message(\"DONE\")\n  }\n  bed.data <- read.csv(bed.file.name, sep=\",\")\n  colnames(bed.data)<-c(\"chr\", \"meth.start\",\"meth.end\", \"meth.strand\", \"meth.score\")\n  bed.list= splitGroup(bed.data, group.thr) #Split according to group.thr in two grops\n  known.conserved.tfbs <- known.conserved.tfbs[,c(2:4,7,5,8)] #Select columns chrom, chromStart,chromEnd,strand, type\n  colnames(known.conserved.tfbs)<-c(\"chrom\",\"tfbs.start\",\"tfbs.end\", \"tfbs.strand\", \"name\", \"tfbs.zScore\")\n  \n  g1.bed = with(bed.list[[1]], GRanges(chr, IRanges(start=meth.start, end=meth.end), strand=meth.strand, score=meth.score))\n  g2.bed = with(bed.list[[2]], GRanges(chr, IRanges(start=meth.start, end=meth.end), strand=meth.strand, score=meth.score))\n \n  tfbs = with(known.conserved.tfbs, GRanges(chrom, IRanges(start=tfbs.start, end=tfbs.end), name=name, score=tfbs.zScore))\n  g1.hits = findOverlaps(g1.bed, tfbs, ignore.strand=FALSE, select=\"all\") #Group1 overlaps with conserved tfbs\n  g2.hits = findOverlaps(g2.bed, tfbs, ignore.strand=FALSE, select=\"all\")  #Group2 overlaps with conserved tfbs\n  g1 <- cbind(as.data.frame(g1.bed[queryHits(g1.hits)]), as.data.frame(tfbs[subjectHits(g1.hits)]))\n  g2 <- cbind(as.data.frame(g2.bed[queryHits(g2.hits)]), as.data.frame(tfbs[subjectHits(g2.hits)]))\n  g1.bed.frame = as.data.frame(g1.bed[queryHits(g1.hits)])\n  g2.bed.frame = as.data.frame(g2.bed[queryHits(g2.hits)])\n colnames(g1.bed.frame)= colnames(g1.bed.frame) = c(\"meth.chr\",\"meth.start\",\"meth.end\",\"meth.width\",\"meth.strand\",\"meth.score\")\n  g1.trans.frame <- as.data.frame(tfbs[subjectHits(g1.hits)])\n  g2.trans.frame <- as.data.frame(tfbs[subjectHits(g2.hits)])\n  colnames(g1.trans.frame) = colnames(g2.trans.frame) <- c(\"trans.chr\",\"trans.start\",\"trans.end\",\"trans.width\",\"trans.strand\",\"name\")\n  g1.merged <- cbind(g1.bed.frame, g1.trans.frame)\n  g2.merged <- cbind(g2.bed.frame, g2.trans.frame)\n  g1.freq <- count(g1.merged, 'name')\n  g2.freq <- count(g2.merged, 'name')\n \n  known.hg19.conserved.factors <- known.conserved.tfbs.factors[known.conserved.tfbs.factors$species==\"human\",]\n  \n  g1.merged.with.factors <- merge(g1.merged, known.hg19.conserved.factors, by = \"name\", all.x=TRUE)\n  g2.merged.with.factors <- merge(g2.merged, known.hg19.conserved.factors, by = \"name\", all.x=TRUE)\n  mergeRef <- merge(known.conserved.tfbs, known.hg19.conserved.factors, by = \"name\")\n  refFreq <- count(mergeRef, 'factor')\n  result <- list()\n  result[[1]] <- g1.merged.with.factors\n  result[[2]] <- g2.merged.with.factors\n  result[[3]] <- refFreq\n  return(result)\n}\n\n\n#' Find differentially methylated sites overlapping human/mouse/rat conserved TFBS\n#'\n#' Detection of differentially methylated sites overlapping conserved transcription factor binding sites in the human/mouse/rat alignment.\n#' Depends on: Biostrings, BSgenome.Hsapiens.UCSC.hg19\n#' @param bed.list   A list of of two data frames containing the differentailly methylated sites with >group.thr and <group.thr \n#' @return L.similarity A detailed data frame containing an absolute score and a relative percentage score. The maximum absolute score is 2*the width of the smaller matrix in the comparison pair\n#' @return H.similarity A detailed data frame containing an absolute score and a relative percentage score. The maximum absolute score is 2*the width of the smaller matrix in the comparison pair\n#' @return Sequence logo of the transcription factor binding sites identified in the Low group\n#' @return Sequence logo of the transcription factor binding sites identified in the High group\n#' @return A scatter plot where relative similarity scores are compared between the High and Low groups\n#' @author Andigoni Malousi\n#' @export \nfindTFBS <- function(bed.list) {\n  #Build consensus matrices of group1, group2\n  h.cons <- consensusMatrix(bed2seq(bed.list[[1]], OFFSET)) #Biostrings,BSgenome.Hsapiens.UCSC.hg19 => Matrix with the base occurrences \n  l.cons <- consensusMatrix(bed2seq(bed.list[[2]], OFFSET)) # => Matrix with the base occurrences \n  \n  h.pwm <- h.cons[DNA.ALPHABET,]/sum(h.cons[,1]) # => Matrix with the base frequencies for >= group.thr\n  l.pwm <- l.cons[DNA.ALPHABET,]/sum(l.cons[,1])\n  Hseqlogo <- seqLogo::seqLogo(h.pwm, ic.scale=FALSE)\n  Lseqlogo <- seqLogo::seqLogo(l.pwm, ic.scale=FALSE)\n  suppressMessages(library(JASPAR2014))\n  opts = list()\n  opts[[\"species\"]] = JASPAR.SPECIES\n  opts[[\"all_versions\"]] = TRUE\n  library(TFBSTools)\n  PFMatrixList = getMatrixSet(JASPAR2014, opts) \n  #pwm = toPWM(PFMatrixList[[145]], pseudocounts=0.8) #get pwm of TF with ID 145\n  LsimMatrix <- as.data.frame(PFMSimilarity(pfmSubject = PFMatrixList,pfmQuery = h.cons))\n  HsimMatrix <- as.data.frame(PFMSimilarity(pfmSubject = PFMatrixList,pfmQuery = l.cons))\n #replace with ggplot2 scatterplot\n   scatter <-scatter.smooth(t(HsimMatrix[2,]),t(LsimMatrix[2,]), type= \"b\",\n                 xlab=\"TFBS similarity score for >=group.thr sites\", ylab=\"TFBS similarity score for <group.thr sites\"\n                   )\n  result <- list()\n  result[[1]] <- LsimMatrix\n  result[[2]] <- HsimMatrix\n  result[[3]] <-Lseqlogo\n  result[[4]] <-Hseqlogo\n  result[[5]] <- scatter\n  return(result)\n}\n\n",
    "created" : 1452449984758.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2902534409",
    "id" : "2B3A81D0",
    "lastKnownWriteTime" : 1467047743,
    "path" : "~/Desktop/INAB/MeinteR/R/dmsTFBS.R",
    "project_path" : "R/dmsTFBS.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}